{"ast":null,"code":"var _jsxFileName = \"/home/workspace/src/components/GameQuestionLogic.jsx\";\nimport React, { Component } from 'react';\nimport GameResults from './GameResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameQuestionLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateQuestion = () => {\n      this.xValue = Math.floor(Math.random() * 100);\n      this.yValue = Math.floor(Math.random() * 100);\n      this.zValue = Math.floor(Math.random() * 100);\n      this.systemAnswer = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n      console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.systemAnswer}`); //return '';\n    };\n\n    this.updateGameSate = () => {};\n\n    this.markQuestionForAnswer = answerFromPlayer => {\n      this.generateQuestion();\n      const correctAnswer = this.xValue + this.yValue + this.zValue;\n\n      if (correctAnser === this.systemAnswer && answerFromPlayer === 'true') {\n        return correctAnswr;\n      } else {\n        return false;\n      }\n    };\n\n    this.handleOnClickOfTrueButton = answerTrue => {\n      this.markQuestionForAnser(answerTrue);\n      this.handleCheckAnswerIsCorrect(answerTrue);\n      return '';\n    };\n\n    this.handleOnClickOfFalseButton = answerFalse => {\n      this.markQuestionForAnswer(answerFalse);\n      this.handleCheckAnswerIsFalse(anserFalse);\n      return '';\n    };\n\n    this.handleCheckAnswerIsCorrect = correct => {\n      if (correct) {\n        this.setState(presentState => ({\n          answersCount: presentState.answersCount + 1\n        }));\n      } else {\n        this.setState(presentState => ({\n          questionsCount: presentState.questionsCount + 1\n        }));\n      }\n    };\n\n    this.xValue = 0;\n    this.yValue = 0;\n    this.zValue = 0;\n    this.suggestedAnswer = 0;\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0; // run the function on app load\n\n    this.generateQuestion(); // binding of events\n\n    this.this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sugAnswer: this.suggestedAnswer,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mental Math\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"equation\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: `${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.sugAnswer}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleOnClickOfTrueButton,\n        children: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleOnClickOfFalseButton('false'),\n        children: \"False\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: /*#__PURE__*/_jsxDEV(GameResults, {\n          correctAnswersCount: this.state.answersCount,\n          questionsCount: this.state.questionscount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GameQuestionLogic;","map":{"version":3,"sources":["/home/workspace/src/components/GameQuestionLogic.jsx"],"names":["React","Component","GameResults","GameQuestionLogic","constructor","props","generateQuestion","xValue","Math","floor","random","yValue","zValue","systemAnswer","console","log","updateGameSate","markQuestionForAnswer","answerFromPlayer","correctAnswer","correctAnser","correctAnswr","handleOnClickOfTrueButton","answerTrue","markQuestionForAnser","handleCheckAnswerIsCorrect","handleOnClickOfFalseButton","answerFalse","handleCheckAnswerIsFalse","anserFalse","correct","setState","presentState","answersCount","questionsCount","suggestedAnswer","correctAnswersCount","this","state","x","y","z","sugAnswer","render","questionscount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GameResults from './GameResults';\n\nclass GameQuestionLogic extends Component {\n  constructor(props){\n    super(props);\n    \n    this.xValue = 0;\n    this.yValue = 0;\n    this.zValue = 0;\n    this.suggestedAnswer = 0;\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0;\n    \n    // run the function on app load\n    this.generateQuestion();\n    \n    // binding of events\n    this.\n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sugAnswer: this.suggestedAnswer,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    }\n  }\n  \n  generateQuestion = () => {\n    this.xValue = Math.floor(Math.random() * 100);\n    this.yValue = Math.floor(Math.random() * 100);\n    this.zValue = Math.floor(Math.random() * 100);\n    this.systemAnswer = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n    \n    console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.systemAnswer}`);\n    //return '';\n  }\n  \n  updateGameSate = () => {\n    \n  }\n  \n  // check if the answers are correct\n  markQuestionForAnswer = (answerFromPlayer) =>{\n    this.generateQuestion();\n    const correctAnswer = this.xValue + this.yValue + this.zValue;\n    \n    if(correctAnser === this.systemAnswer && answerFromPlayer === 'true'){\n      return correctAnswr;\n    } else {\n      return false;\n    }\n  }\n  \n  // the true button is clicked\n  handleOnClickOfTrueButton = (answerTrue) => {\n    this.markQuestionForAnser(answerTrue);\n    this.handleCheckAnswerIsCorrect(answerTrue);\n    return '';\n  }\n  \n  // when the false button is clicked\n  handleOnClickOfFalseButton = (answerFalse) => {\n    this.markQuestionForAnswer(answerFalse);\n    this.handleCheckAnswerIsFalse(anserFalse);\n    return '';\n  }\n  \n  handleCheckAnswerIsCorrect = (correct) => {\n    if(correct){\n      this.setState((presentState) => ({\n        answersCount: presentState.answersCount + 1\n      }))\n    } else {\n      this.setState((presentState) => ({\n        questionsCount: presentState.questionsCount + 1\n      }))\n    }\n  }\n  \n  render(){\n    return(\n      <div className=\"game\">\n          <h2>Mental Math</h2>\n          <div className=\"equation\">\n            <p className=\"text\">{`${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.sugAnswer}`}</p>\n          </div>\n          <button onClick={this.handleOnClickOfTrueButton}>True</button>\n          <button onClick={this.handleOnClickOfFalseButton('false')}>False</button>\n          <p className=\"text\">\n            <GameResults \n              correctAnswersCount={this.state.answersCount}\n              questionsCount={this.state.questionscount}\n            />\n          </p>\n      </div>\n    )\n  }\n}\n\nexport default GameQuestionLogic;"]},"metadata":{},"sourceType":"module"}