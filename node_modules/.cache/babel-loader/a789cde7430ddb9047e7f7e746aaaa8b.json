{"ast":null,"code":"var _jsxFileName = \"/home/workspace/src/components/GameQuestionLogic.jsx\";\nimport React, { Component } from 'react';\nimport GameResults from './GameResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameQuestionLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateQuestion = () => {\n      this.xValue = Math.floor(Math.random() * 100);\n      this.yValue = Math.floor(Math.random() * 100);\n      this.zValue = Math.floor(Math.random() * 100);\n      this.systemAnswer = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n      console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.systemAnswer}`); //return '';\n    };\n\n    this.updateGameSate = () => {\n      this.setState(presentState => ({\n        x: this.xValue,\n        y: this.yValue,\n        z: this.zValue,\n        sysAnswer: this.systemAnswer\n      }));\n    };\n\n    this.markQuestionForAnswer = answerFromPlayer => {\n      this.generateQuestion();\n      const correctAnswer = this.xValue + this.yValue + this.zValue;\n      console.log('Correct Answer', correctAnswer);\n\n      if (correctAnswer === this.systemAnswer && answerFromPlayer === 'true') {\n        return correctAnswer;\n      } else {\n        return false;\n      }\n    };\n\n    this.handleOnClickOfTrueButton = answerTrue => {\n      this.markQuestionForAnser(answerTrue);\n      this.updateGameState();\n      this.handleCheckAnswerIsCorrect(answerTrue);\n      return '';\n    };\n\n    this.handleOnClickOfFalseButton = answerFalse => {\n      this.markQuestionForAnswer(answerFalse);\n      this.handleCheckAnswerIsFalse(answerFalse);\n      return '';\n    };\n\n    this.xValue = 0;\n    this.yValue = 0;\n    this.zValue = 0;\n    this.systemAnswer = 0;\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0; // run the function on app load\n\n    this.generateQuestion(); // binding of events\n\n    this.handleOnClickOfTrueButton = this.handleOnClickOfTrueButton.bind(this);\n    this.handleOnClickOfFalseButton = this.handleOnClickOfFalseButton.bind(this);\n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sysAnswer: this.systemAnswer,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    };\n  } // generate questions and set state values\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mental Math\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"equation\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: `${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.sysAnswer}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleOnClickOfTrueButton('true'),\n        children: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleOnClickOfFalseButton('false'),\n        children: \"False\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: /*#__PURE__*/_jsxDEV(GameResults, {\n          correctAnswersCount: this.state.answersCount,\n          questionsCount: this.state.questionsCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GameQuestionLogic;","map":{"version":3,"sources":["/home/workspace/src/components/GameQuestionLogic.jsx"],"names":["React","Component","GameResults","GameQuestionLogic","constructor","props","generateQuestion","xValue","Math","floor","random","yValue","zValue","systemAnswer","console","log","updateGameSate","setState","presentState","x","y","z","sysAnswer","markQuestionForAnswer","answerFromPlayer","correctAnswer","handleOnClickOfTrueButton","answerTrue","markQuestionForAnser","updateGameState","handleCheckAnswerIsCorrect","handleOnClickOfFalseButton","answerFalse","handleCheckAnswerIsFalse","questionsCount","correctAnswersCount","bind","state","answersCount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GameResults from './GameResults';\n\nclass GameQuestionLogic extends Component {\n  constructor(props){\n    super(props);\n    \n    this.xValue = 0;\n    this.yValue = 0;\n    this.zValue = 0;\n    this.systemAnswer = 0;\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0;\n    \n    // run the function on app load\n    this.generateQuestion();\n    \n    // binding of events\n    this.handleOnClickOfTrueButton = this.handleOnClickOfTrueButton.bind(this);\n    this.handleOnClickOfFalseButton = this.handleOnClickOfFalseButton.bind(this);\n    \n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sysAnswer: this.systemAnswer,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    }\n  }\n  \n  // generate questions and set state values\n  generateQuestion = () => {\n    this.xValue = Math.floor(Math.random() * 100);\n    this.yValue = Math.floor(Math.random() * 100);\n    this.zValue = Math.floor(Math.random() * 100);\n    this.systemAnswer = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n    \n    console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.systemAnswer}`);\n    //return '';\n  }\n  \n  updateGameSate = () => {\n    this.setState((presentState) => ({\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sysAnswer: this.systemAnswer,\n    }))\n  }\n  \n  // check if the answers are correct\n  markQuestionForAnswer = (answerFromPlayer) => {\n    this.generateQuestion();\n    const correctAnswer = this.xValue + this.yValue + this.zValue;\n    console.log('Correct Answer', correctAnswer);\n    if(correctAnswer === this.systemAnswer && answerFromPlayer === 'true'){\n      return correctAnswer;\n    } else {\n      return false;\n    }\n  }\n  \n  \n  // the true button is clicked\n  handleOnClickOfTrueButton = (answerTrue) => {\n    this.markQuestionForAnser(answerTrue);\n    this.updateGameState();\n    this.handleCheckAnswerIsCorrect(answerTrue);\n    return '';\n  }\n  \n  // when the false button is clicked\n  handleOnClickOfFalseButton = (answerFalse) => {\n    this.markQuestionForAnswer(answerFalse);\n    this.handleCheckAnswerIsFalse(answerFalse);\n    return '';\n  }\n  \n  render(){\n    return(\n      <div className=\"game\">\n          <h2>Mental Math</h2>\n          <div className=\"equation\">\n            <p className=\"text\">{`${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.sysAnswer}`}</p>\n          </div>\n          <button onClick={() => this.handleOnClickOfTrueButton('true')}>True</button>\n          <button onClick={() => this.handleOnClickOfFalseButton('false')}>False</button>\n          <p className=\"text\">\n            <GameResults \n              correctAnswersCount={this.state.answersCount}\n              questionsCount={this.state.questionsCount}\n            />\n          </p>\n      </div>\n    )\n  }\n}\n\nexport default GameQuestionLogic;"]},"metadata":{},"sourceType":"module"}