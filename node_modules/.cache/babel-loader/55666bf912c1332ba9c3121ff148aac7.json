{"ast":null,"code":"var _jsxFileName = \"/home/workspace/src/components/GameQuestionLogic.jsx\";\nimport React, { Component } from 'react';\nimport GameResults from './GameResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameQuestionLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateQuestion = () => {\n      this.xValue = Math.floor(Math.random() * 100);\n      this.yValue = Math.floor(Math.random() * 100);\n      this.zValue = Math.floor(Math.random() * 100);\n      this.systemAnswer = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n      console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.systemAnswer}`); //return '';\n    };\n\n    this.updateGameState = () => {\n      this.setState(presentState => ({\n        x: this.xValue,\n        y: this.yValue,\n        z: this.zValue,\n        sysAnswer: this.systemAnswer\n      }));\n    };\n\n    this.markQuestionForAnswer = answerFromPlayer => {\n      const correctAnswer = this.xValue + this.yValue + this.zValue;\n      console.log('Player Answer', correctAnswer);\n\n      if (correctAnswer === this.systemAnswer && answerFromPlayer === 'true') {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.handleCheckAnswerIsCorrect = correct => {\n      if (correct) {\n        this.setState(presentState => ({\n          answersCount: presentState.answersCount + 1\n        }));\n      }\n\n      this.setState(presentState => ({\n        questionsCount: presentState.questionsCount + 1\n      }));\n      console.log('Correct Answer', correct);\n      console.log('System Answer', this.state.sysAnswer);\n      this.generateQuestion();\n    };\n\n    this.handleOnClickOfTrueButton = answerTrue => {\n      this.markQuestionForAnswer(answerTrue);\n      this.handleCheckAnswerIsCorrect(answerTrue);\n      this.updateGameState();\n    };\n\n    this.handleOnClickOfFalseButton = answerFalse => {\n      this.markQuestionForAnswer(answerFalse);\n      this.handleCheckAnswerIsCorrect(answerFalse);\n      this.updateGameState();\n    };\n\n    this.xValue = 0;\n    this.yValue = 0;\n    this.zValue = 0;\n    this.systemAnswer = 0;\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0; // run the function on app load\n\n    this.generateQuestion(); // binding of events\n\n    this.handleOnClickOfTrueButton = this.handleOnClickOfTrueButton.bind(this);\n    this.handleOnClickOfFalseButton = this.handleOnClickOfFalseButton.bind(this);\n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sysAnswer: this.systemAnswer,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    };\n  } // generate questions and set state values\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mental Math\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"equation\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: `${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.sysAnswer}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleOnClickOfTrueButton('true'),\n        children: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleOnClickOfFalseButton('false'),\n        children: \"False\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: /*#__PURE__*/_jsxDEV(GameResults, {\n          correctAnswersCount: this.state.answersCount,\n          questionsCount: this.state.questionsCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GameQuestionLogic;","map":{"version":3,"sources":["/home/workspace/src/components/GameQuestionLogic.jsx"],"names":["React","Component","GameResults","GameQuestionLogic","constructor","props","generateQuestion","xValue","Math","floor","random","yValue","zValue","systemAnswer","console","log","updateGameState","setState","presentState","x","y","z","sysAnswer","markQuestionForAnswer","answerFromPlayer","correctAnswer","handleCheckAnswerIsCorrect","correct","answersCount","questionsCount","state","handleOnClickOfTrueButton","answerTrue","handleOnClickOfFalseButton","answerFalse","correctAnswersCount","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GameResults from './GameResults';\n\nclass GameQuestionLogic extends Component {\n  constructor(props){\n    super(props);\n    \n    this.xValue = 0;\n    this.yValue = 0;\n    this.zValue = 0;\n    this.systemAnswer = 0;\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0;\n    \n    // run the function on app load\n    this.generateQuestion();\n    \n    // binding of events\n    this.handleOnClickOfTrueButton = this.handleOnClickOfTrueButton.bind(this);\n    this.handleOnClickOfFalseButton = this.handleOnClickOfFalseButton.bind(this);\n    \n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sysAnswer: this.systemAnswer,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    }\n  }\n  \n  // generate questions and set state values\n  generateQuestion = () => {\n    this.xValue = Math.floor(Math.random() * 100);\n    this.yValue = Math.floor(Math.random() * 100);\n    this.zValue = Math.floor(Math.random() * 100);\n    this.systemAnswer = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n    \n    console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.systemAnswer}`);\n    //return '';\n  }\n  \n  updateGameState = () => {\n    this.setState((presentState) => ({\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      sysAnswer: this.systemAnswer,\n    }))\n  }\n  \n  // check if the answers are correct\n  markQuestionForAnswer = (answerFromPlayer) => {\n    const correctAnswer = this.xValue + this.yValue + this.zValue;\n        console.log('Player Answer', correctAnswer);\n    if(correctAnswer === this.systemAnswer && answerFromPlayer === 'true'){\n      return true;\n    } else {\n      return false;\n    }\n  }\n  \n  handleCheckAnswerIsCorrect = (correct) => {\n    if(correct){\n      this.setState((presentState) => ({\n        answersCount: presentState.answersCount + 1\n      }))\n    }\n    this.setState((presentState) => ({\n      questionsCount: presentState.questionsCount + 1\n    }))\n    \n    console.log('Correct Answer', correct);\n    console.log('System Answer', this.state.sysAnswer);\n    this.generateQuestion();\n  }\n  \n  // the true button is clicked\n  handleOnClickOfTrueButton = (answerTrue) => {\n    this.markQuestionForAnswer(answerTrue);\n    this.handleCheckAnswerIsCorrect(answerTrue);\n    this.updateGameState();\n  }\n  \n  // when the false button is clicked\n  handleOnClickOfFalseButton = (answerFalse) => {\n    this.markQuestionForAnswer(answerFalse);\n    this.handleCheckAnswerIsCorrect(answerFalse);\n    this.updateGameState();\n  }\n  \n  render(){\n    return(\n      <div className=\"game\">\n          <h2>Mental Math</h2>\n          <div className=\"equation\">\n            <p className=\"text\">{`${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.sysAnswer}`}</p>\n          </div>\n          <button onClick={() => this.handleOnClickOfTrueButton('true')}>True</button>\n          <button onClick={() => this.handleOnClickOfFalseButton('false')}>False</button>\n          <p className=\"text\">\n            <GameResults \n              correctAnswersCount={this.state.answersCount}\n              questionsCount={this.state.questionsCount}\n            />\n          </p>\n      </div>\n    )\n  }\n}\n\nexport default GameQuestionLogic;"]},"metadata":{},"sourceType":"module"}