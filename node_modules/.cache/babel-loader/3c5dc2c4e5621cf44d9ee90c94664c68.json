{"ast":null,"code":"var _jsxFileName = \"/home/workspace/src/components/GameQuestionLogic.jsx\";\nimport React, { Component } from 'react';\nimport GameResults from './GameResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameQuestionLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateQuestion = () => {\n      this.xValue = Math.floor(Math.random() * 100);\n      this.yValue = Math.floor(Math.random() * 100);\n      this.zValue = Math.floor(Math.random() * 100);\n      this.pValue = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n      console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.pValue}`); //return '';\n    };\n\n    this.updateGameState = () => {\n      this.setState(presentState => ({\n        x: this.xValue,\n        y: this.yValue,\n        z: this.zValue,\n        p: this.pValue,\n        answersCount: presentState.answersCount,\n        questionsCount: presentState.questionsCount\n      }));\n    };\n\n    this.markQuestionForCorrectAnswer = answerFromUser => {\n      console.log('STATE VALS', `${this.state.x}, ${this.state.y}, ${this.state.z}`);\n      const correctAnswer = this.state.x + this.state.y + this.state.z;\n      console.log('Sys Answer', correctAnswer);\n      /*if(correctAnswer === this.state.p){\n        return correctAnswer === this.state.p && answerFromUser === 'true'\n      } else {\n        return correctAnswer === this.state.p && answerFromUser === 'false';\n      }*/\n\n      console.log('TABITA', correctAnswer === this.state.p && answerFromUser === 'true');\n      console.log('KUM', correctAnswer === this.state.p && answerFromUser === 'false');\n      return correctAnswer === this.state.p && answerFromUser === 'true' || correctAnswer === this.state.p && answerFromUser === 'false';\n    };\n\n    this.handleCheckAnswerIsCorrect = correctAnswer => {\n      console.log('Type of Correct', typeof correctAnswer);\n      console.log('Correct Answer Top', correctAnswer); // increment answersCount only when the answer is correct\n\n      if (correctAnswer) {\n        console.log('Correct Answer Inside', correctAnswer);\n        this.setState(presentState => ({\n          answersCount: presentState.answersCount + 1\n        }));\n      }\n\n      ; // increment questionsCount since it's always asking questions\n\n      this.setState(presentState => ({\n        questionsCount: presentState.questionsCount + 1\n      }));\n      console.log('Correct Answer Down', correctAnswer);\n      this.generateQuestion();\n    };\n\n    this.handleOnClickOfButton = answer => {\n      console.log('Player Answer', answer);\n      this.updateGameState();\n      this.markQuestionForCorrectAnswer(answer);\n      this.handleCheckAnswerIsCorrect(answer);\n    };\n\n    this.xValue = 0; // value for x\n\n    this.yValue = 0; // value for y\n\n    this.zValue = 0; // value for z\n\n    this.pValue = 0; // value for p - system proposed answer\n\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0; // run the function on app load\n\n    this.generateQuestion(); // binding of events\n\n    this.handleOnClickOfButton = this.handleOnClickOfButton.bind(this);\n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      p: this.pValue,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    };\n  } // generate questions and set state values\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mental Math\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"equation\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: `${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.p}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleOnClickOfButton('true'),\n        children: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleOnClickOfButton('false'),\n        children: \"False\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: /*#__PURE__*/_jsxDEV(GameResults, {\n          correctAnswersCount: this.state.answersCount,\n          questionsCount: this.state.questionsCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GameQuestionLogic;","map":{"version":3,"sources":["/home/workspace/src/components/GameQuestionLogic.jsx"],"names":["React","Component","GameResults","GameQuestionLogic","constructor","props","generateQuestion","xValue","Math","floor","random","yValue","zValue","pValue","console","log","updateGameState","setState","presentState","x","y","z","p","answersCount","questionsCount","markQuestionForCorrectAnswer","answerFromUser","state","correctAnswer","handleCheckAnswerIsCorrect","handleOnClickOfButton","answer","correctAnswersCount","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GameResults from './GameResults';\n\nclass GameQuestionLogic extends Component {\n  constructor(props){\n    super(props);\n    \n    this.xValue = 0; // value for x\n    this.yValue = 0; // value for y\n    this.zValue = 0; // value for z\n    this.pValue = 0; // value for p - system proposed answer\n    this.questionsCount = 0;\n    this.correctAnswersCount = 0;\n    \n    // run the function on app load\n    this.generateQuestion();\n    \n    // binding of events\n    this.handleOnClickOfButton = this.handleOnClickOfButton.bind(this);\n    \n    this.state = {\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      p: this.pValue,\n      questionsCount: this.questionsCount,\n      answersCount: this.correctAnswersCount\n    }\n  }\n  \n  // generate questions and set state values\n  generateQuestion = () => {\n    this.xValue = Math.floor(Math.random() * 100);\n    this.yValue = Math.floor(Math.random() * 100);\n    this.zValue = Math.floor(Math.random() * 100);\n    this.pValue = Math.floor(Math.random() * 3) + this.xValue + this.yValue + this.zValue;\n    \n    console.log('Gen Question', `x: ${this.xValue}, y: ${this.yValue}, z: ${this.zValue}, ans: ${this.pValue}`);\n    //return '';\n  }\n  \n  updateGameState = () => {\n    this.setState((presentState) => ({\n      x: this.xValue,\n      y: this.yValue,\n      z: this.zValue,\n      p: this.pValue,\n      answersCount: presentState.answersCount,\n      questionsCount: presentState.questionsCount\n    }))\n  }\n  \n  // check if the answers are correct\n  markQuestionForCorrectAnswer = (answerFromUser) => {\n    console.log('STATE VALS', `${this.state.x}, ${this.state.y}, ${this.state.z}`);\n    const correctAnswer = this.state.x + this.state.y + this.state.z;\n    console.log('Sys Answer', correctAnswer);\n    /*if(correctAnswer === this.state.p){\n      return correctAnswer === this.state.p && answerFromUser === 'true'\n    } else {\n      return correctAnswer === this.state.p && answerFromUser === 'false';\n    }*/\n    console.log('TABITA', correctAnswer === this.state.p && answerFromUser === 'true')\n    console.log('KUM', correctAnswer === this.state.p && answerFromUser === 'false')\n    return(\n      correctAnswer === this.state.p && answerFromUser === 'true' ||\n      correctAnswer === this.state.p && answerFromUser === 'false'\n    );\n  }\n  \n  handleCheckAnswerIsCorrect = (correctAnswer) => {\n    console.log('Type of Correct', typeof correctAnswer);\n\tconsole.log('Correct Answer Top', correctAnswer);\n    \n    // increment answersCount only when the answer is correct\n    if(correctAnswer){\n      console.log('Correct Answer Inside', correctAnswer);\n      this.setState((presentState) => ({\n        answersCount: presentState.answersCount + 1\n      }))\n    };\n    \n    // increment questionsCount since it's always asking questions\n    this.setState((presentState) => ({\n      questionsCount: presentState.questionsCount + 1\n    }));\n    console.log('Correct Answer Down', correctAnswer);\n    this.generateQuestion();\n  }\n  \n  // when true or false button is clicked\n  handleOnClickOfButton = (answer) => {\n    console.log('Player Answer', answer);\n    this.updateGameState();\n    this.markQuestionForCorrectAnswer(answer);  \n    this.handleCheckAnswerIsCorrect(answer);\n  }\n  \n\n  render(){\n    return(\n      <div className=\"game\">\n          <h2>Mental Math</h2>\n          <div className=\"equation\">\n            <p className=\"text\">{`${this.state.x} + ${this.state.y} + ${this.state.z} = ${this.state.p}`}</p>\n          </div>\n          <button onClick={() => this.handleOnClickOfButton('true')}>True</button>\n          <button onClick={() => this.handleOnClickOfButton('false')}>False</button>\n          <p className=\"text\">\n            <GameResults \n              correctAnswersCount={this.state.answersCount}\n              questionsCount={this.state.questionsCount}\n            />\n          </p>\n      </div>\n    )\n  }\n}\n\nexport default GameQuestionLogic;"]},"metadata":{},"sourceType":"module"}